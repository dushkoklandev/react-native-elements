"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[56143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:r,i[1]=m;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>m,metadata:()=>l,toc:()=>c});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],m={title:"ThemeProvider",sidebar_position:1},s=void 0,l={unversionedId:"customization/themeprovider",id:"customization/themeprovider",title:"ThemeProvider",description:"The previous solution works great for only one component, but imagine having to",source:"@site/docs/customization/1.themeprovider.mdx",sourceDirName:"customization",slug:"/customization/themeprovider",permalink:"/docs/next/customization/themeprovider",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/customization/1.themeprovider.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ThemeProvider",sidebar_position:1},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/next/customizing"},next:{title:"Theme object",permalink:"/docs/next/customization/theme_object"}},p={},c=[{value:"use-theme hook",id:"use-theme-hook",level:3},{value:"use-theme-mode hook",id:"use-theme-mode-hook",level:3},{value:"make-styles",id:"make-styles",level:3},{value:"Dark Mode",id:"dark-mode",level:3}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The previous solution works great for only one component, but imagine having to\ndo this for every component you want custom styles for. That could get a bit\ntedious to manage. Thankfully, there's a better way to do this. React Native\nElements ships with a 3 utilities for large-scale theming."),(0,a.kt)("p",null,"Firstly you'll want to set up your ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If you do not specify ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," in ThemeProvider, it would use ",(0,a.kt)("a",{parentName:"p",href:"./theme_object#default-light-colors"},"defaultTheme")))),(0,a.kt)("p",null,"The example above achieves the same goals as the first example \u2014 apply the same\nstyles to multiple instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," in the app. However this example\napplies the ",(0,a.kt)("inlineCode",{parentName:"p"},"raised")," prop to every instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," inside the component\ntree under ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),". Both of these buttons will have the ",(0,a.kt)("inlineCode",{parentName:"p"},"raised")," prop\nset to true."),(0,a.kt)("p",null,"This is extremely convenient and is made possible through\n",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React's Context API"),"."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To theme subcomponents such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ListItem.Title"),', in your theme remove the dot and list them as "ListItemTitle"'))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"use-theme-hook"},"use-theme hook"),(0,a.kt)("p",null,"Hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"theme"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"updateTheme")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"replaceTheme")," from ThemeProvider context or default theme if you did not wrap application with ThemeProvider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme, updateTheme } = useTheme();\n  return (\n    <View style={{ background: theme.colors.primary }}>\n      <Button onPress={() => updateTheme({ colors: { primary: 'red' } })} />\n    </View>\n  );\n}\n")),(0,a.kt)("p",null,"The updateTheme function merges the theme passed in with the current theme."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"updateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"replaceTheme")," function merges the theme passed in with the default theme."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"use-theme-mode-hook"},"use-theme-mode hook"),(0,a.kt)("p",null,"You can get current theme mode (light or dark) and update it using setMode function from useThemeMode hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n")),(0,a.kt)("h3",{id:"make-styles"},"make-styles"),(0,a.kt)("p",null,"If you want to keep your styles outside the component use ",(0,a.kt)("inlineCode",{parentName:"p"},"makeStyles()")," (hook generator) to reference the ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," and component props (optional param)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Props = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n")),(0,a.kt)("p",null,"Don't want to wrap your components with ",(0,a.kt)("inlineCode",{parentName:"p"},"withTheme"),"? You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeConsumer")," component\nwhich uses render props!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n")),(0,a.kt)("h3",{id:"dark-mode"},"Dark Mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useColorScheme } from 'react-native-appearance';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#899656',\n  },\n  darkColors: {\n    primary: '#344512',\n  },\n  mode: 'light',\n});\n\nconst ColorScheme = ({ children }) => {\n  const colorMode = useColorScheme();\n  const { theme } = useTheme();\n  const { setMode } = useThemeMode();\n\n  React.useEffect(() => {\n    setMode(colorMode);\n  }, [colorMode]);\n\n  return (\n    <View style={{ backgroundColor: theme.colors.background }}>{children}</View>\n  );\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorScheme>{/*  */}</ColorScheme>\n    </ThemeProvider>\n  );\n};\n")))}d.isMDXComponent=!0}}]);