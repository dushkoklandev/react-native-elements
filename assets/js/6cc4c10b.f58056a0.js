(self.webpackChunk=self.webpackChunk||[]).push([[70811],{54236:(t,e,n)=>{"use strict";n.d(e,{Z:()=>k});var a=n(87462),l=n(67294),r=n(91262),i=n(18421),o=n(77356),d=n(41652),p=n(24309),u=n(16042),m=n(20346),s=n(30650);const k=function(t){var e=t.params,n=t.containerStyle,k=void 0===n?{}:n;return l.createElement(r.Z,{fallback:l.createElement(l.Fragment,null,"Loading...")},(function(){return l.createElement(m.X9.Provider,null,l.createElement(m.PK,{initialMetrics:s.o},l.createElement("div",{style:Object.assign({border:"1px solid var(--ifm-color-emphasis-200)",borderRadius:"var(--ifm-global-radius)",position:"relative"},k)},l.createElement(i.Z,(0,a.Z)({},e.compilerProps,{minHeight:62,placeholder:o.Z}))),l.createElement(d.Z,{msg:e.errorProps.msg,isPopup:!0}),l.createElement(p.Z,e.knobProps),l.createElement(d.Z,e.errorProps),l.createElement(u.E,e.actions)))}))}},67892:(t,e,n)=>{"use strict";n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>N,default:()=>h,frontMatter:()=>k,metadata:()=>c,toc:()=>y});var a=n(87462),l=n(63366),r=n(67294),i=n(3905),o=(n(9877),n(72360),n(19617)),d=n(54236),p=n(40318),u=n(62290);const m=function(){var t=(0,p.Z)({componentName:"ButtonGroup",props:{buttonStyle:{type:u.n.Object,value:"{width:100}"},buttonContainerStyle:{type:u.n.Object,value:"{}"},buttons:{type:u.n.Array,value:"['Hello', 'World', 'React',\"Native\",\"Elements\"]"},Component:{type:u.n.ReactNode,description:"React Native Component\tTouchableOpacity (ios) or TouchableNativeFeedback (android)",value:null},containerStyle:{type:u.n.Object,value:"{}"},disabled:{type:u.n.Array,description:"boolean OR number[]. Controls if buttons are disabled. Setting true makes all of them disabled, while using an array only makes those indices disabled.",value:"[3,4]"},disabledStyle:{type:u.n.Object,value:"{}"},disabledTextStyle:{type:u.n.Object,value:"{}"},disabledSelectedStyle:{type:u.n.Object,value:"{}"},disabledSelectedTextStyle:{type:u.n.Object,value:"{}"},innerBorderStyle:{type:u.n.Object,value:"{}"},onPress:{type:u.n.Function,value:"(selectedIdx) => setSelectedIndex(selectedIdx)",propHook:{what:"selectedIdx",into:"selectedIndex"}},selectMultiple:{type:u.n.Boolean,value:!1},selectedButtonStyle:{type:u.n.Object,value:"{}"},selectedIndex:{type:u.n.Number,value:"1",stateful:!0},selectedIndexes:{type:u.n.Array,value:"[]",stateful:!0},selectedTextStyle:{type:u.n.Object,value:"{}"},textStyle:{type:u.n.Object,value:"{}"},underlayColor:{type:u.n.String,value:null},vertical:{type:u.n.Boolean,value:!1}},scope:{ButtonGroup:o.ButtonGroup},imports:{"@rneui/base":{named:["ButtonGroup"]}}});return r.createElement(r.Fragment,null,r.createElement(d.Z,{params:t}))};var s=["components"],k={id:"buttongroup",title:"ButtonGroup"},N=void 0,c={unversionedId:"components/buttongroup",id:"components/buttongroup",title:"ButtonGroup",description:"ButtonGroup is a linear set of segments, each of which function as a button that can display a different view/or perform a different action.",source:"@site/docs/components/ButtonGroup.mdx",sourceDirName:"components",slug:"/components/buttongroup",permalink:"/docs/next/components/buttongroup",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/components/ButtonGroup.mdx",tags:[],version:"current",frontMatter:{id:"buttongroup",title:"ButtonGroup"},sidebar:"docs",previous:{title:"Button",permalink:"/docs/next/components/button"},next:{title:"Card",permalink:"/docs/next/components/card"}},g={},y=[{value:"Import",id:"import",level:2},{value:"Props",id:"props",level:2},{value:"Playground",id:"playground",level:2}],b={toc:y};function h(t){var e=t.components,n=(0,l.Z)(t,s);return(0,i.kt)("wrapper",(0,a.Z)({},b,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"ButtonGroup is a linear set of segments, each of which function as a button that can display a different view/or perform a different action.\nUse a ButtonGroup to offer choices that are closely related but mutually exclusive.\nThis component inherits ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/touchablehighlight.html"},"all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements"),"."),(0,i.kt)("h2",{id:"import"},"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { ButtonGroup } from "@rneui/themed";\n')),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("div",{class:"table-responsive"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Component")),(0,i.kt)("td",{parentName:"tr",align:null},"React Component"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Choose other button component such as TouchableOpacity.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"activeOpacity")),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Add active opacity to the button in buttonGroup.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"button")),(0,i.kt)("td",{parentName:"tr",align:null},"object"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Button for the component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"buttonContainerStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify styling for button containers.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"buttonStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify styling for button.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"buttons")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"(string")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"ReactElement<{}, string")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"JSXElementConstructor<any>>)[]")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Array of buttons for component (required), if returning a component, must be an object with { element: componentName }.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"containerStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify styling for main button container.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disabled")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"number[]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Controls if buttons are disabled. Setting ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," makes all of them disabled, while using an array only makes those indices disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disabledSelectedStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Styling for each selected button when disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disabledSelectedTextStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"Text Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Styling for the text of each selected button when disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disabledStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Styling for each button when disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disabledTextStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"Text Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Styling for the text of each button when disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"innerBorderStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"{ color?: string; width?: number; }"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Update the styling of the interior border of the list of buttons.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onHideUnderlay")),(0,i.kt)("td",{parentName:"tr",align:null},"Function"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Function called on hiding underlay.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onLongPress")),(0,i.kt)("td",{parentName:"tr",align:null},"GestureResponderEventHandler"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called when a long-tap gesture is detected.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onPress")),(0,i.kt)("td",{parentName:"tr",align:null},"(...args: any[]) => void"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Function")),(0,i.kt)("td",{parentName:"tr",align:null},"Method to update Button Group Index.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onPressIn")),(0,i.kt)("td",{parentName:"tr",align:null},"GestureResponderEventHandler"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called when a touch is engaged before ",(0,i.kt)("inlineCode",{parentName:"td"},"onPress"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onPressOut")),(0,i.kt)("td",{parentName:"tr",align:null},"GestureResponderEventHandler"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called when a touch is released before ",(0,i.kt)("inlineCode",{parentName:"td"},"onPress"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"onShowUnderlay")),(0,i.kt)("td",{parentName:"tr",align:null},"Function"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Function called on showing underlay.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pressableProps")),(0,i.kt)("td",{parentName:"tr",align:null},"PressableProps except click handlers"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"None")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectMultiple")),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Allows the user to select multiple buttons.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectedButtonStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"View Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify styling for selected button.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectedIndex")),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"null")),(0,i.kt)("td",{parentName:"tr",align:null},"Current selected index of array of buttons.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectedIndexes")),(0,i.kt)("td",{parentName:"tr",align:null},"number[]"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[]")),(0,i.kt)("td",{parentName:"tr",align:null},"Current selected indexes from the array of buttons.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectedTextStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"Text Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify specific styling for text in the selected state.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"setOpacityTo")),(0,i.kt)("td",{parentName:"tr",align:null},"(value: number) => void"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Function to set the opacity.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"textStyle")),(0,i.kt)("td",{parentName:"tr",align:null},"Text Style"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specify specific styling for text.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"underlayColor")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Color [Primary]")),(0,i.kt)("td",{parentName:"tr",align:null},"Specify underlayColor for TouchableHighlight.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"vertical")),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Display the ButtonGroup vertically."))))),(0,i.kt)("h2",{id:"playground"},"Playground"),(0,i.kt)(m,{mdxType:"Play"}))}h.isMDXComponent=!0},33770:()=>{},72950:()=>{},54882:()=>{}}]);